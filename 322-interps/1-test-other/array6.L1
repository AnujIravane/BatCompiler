; array2.L1
; Allocate an array of array
; Except each array is different

(:main
  (:main
    0 1
    (rdi <- 9)
    (rsi <- 7)
    (call allocate 2)
    ((mem rax 8) <- 13)
    ((mem rax 16) <- -1)
    ((mem rax 24) <- 11)
    ((mem rax 32) <- 13)
    ((mem rsp -8) <- :find_max_array_ret)
    (rdi <- rax)
    (call :find_max_array 1)
    :find_max_array_ret
    (rdi <- rax)
    (call print 1)
    (return))
  (:find_max_array
    1 0
    (r8 <- rdi)
    (r8 += 16) ; Start from 2nd element of the array
    (r9 <- (mem rdi 0))
    (r9 <<= 3)
    (r9 += rdi) ; get the address of the last element
    (rax <- (mem rdi 8)) ; Set rax to the first element before starting
    :for_start
    (cjump r8 <= r9 :for_body :for_end)
    :for_body
    (rcx <- (mem r8 0))
    (cjump rax < rcx :replace :keep)
    :replace
    (rax <- (mem r8 0))
    :keep
    (r8 += 8)
    (goto :for_start)
    :for_end
    (return))
)


