; fib.L1
; An implementation of the fibonacci function using recursion

(:main
  (:main
    0 0
    (rdi <- 10)
    ((mem rsp -8) <- :fib_ret)
    (call :fib 1)
    :fib_ret
    (rdi <- rax)
    ((mem rsp -8) <- :encode_ret)
    (call :encode 1)
    :encode_ret
    (rdi <- rax)
    (call print 1)
    (return))
  (:encode
    1 0
    (rdi *= 2)
    (rdi += 1)
    (rax <- rdi)
    (return))
  (:decode
    1 0
    (rdi -= 1)
    (rdi >>= 1)
    (rax <- rdi)
    (return))
  (:fib
    1 2
    (cjump rdi <= 1 :true :false)
    :true
    (rax <- 1)
    (return)
    :false
    ((mem rsp 0) <- rdi)
    (rdi -= 1)
    ((mem rsp -8) <- :fib_recur_ret)
    (call :fib 1)
    :fib_recur_ret
    ((mem rsp 8) <- rax)
    (rdi <- (mem rsp 0))
    (rdi -= 2)
    ((mem rsp -8) <- :fib_recur_ret_2)
    (call :fib 1)
    :fib_recur_ret_2
    (rdx <- (mem rsp 8))
    (rax += rdx)
    (return))
)
