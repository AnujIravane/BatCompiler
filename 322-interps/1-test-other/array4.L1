; array2.L1
; Allocate an array of array
; Except each array is different

(:main
  (:main
    0 1
    (rdi <- 9)
    (rsi <- 7)
    (call allocate 2)
    ((mem rax 8) <- 13)
    ((mem rax 16) <- 3)
    ((mem rax 24) <- 11)
    ((mem rax 32) <- 13)
    ((mem rsp -8) <- :add_array_elem_ret)
    (rdi <- rax)
    (call :add_array_elem 1)
    :add_array_elem_ret
    (rdi <- rax)
    (call print 1)
    (return))
  (:add_array_elem
    1 0
    (r8 <- rdi)
    (r8 += 8)
    (r9 <- (mem rdi 0))
    (r9 <<= 3)
    (r9 += rdi) ; get the address of the last element
    (rax <- 0) ; Set rax to 0 before summing
    :for_start
    (cjump r8 <= r9 :for_body :for_end)
    :for_body
    (rcx <- (mem r8 0))
    (rcx -= 1)
    (rcx >>= 1)
    (rax += rcx)
    (r8 += 8)
    (goto :for_start)
    :for_end
    (rax <<= 1)
    (rax += 1)
    (return))
)


