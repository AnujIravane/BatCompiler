((:main)
  (:main ()
    (let ([arr (new-array 10 0)])
      (let ([zero (aset arr 0 2)])
        (let ([zero (aset arr 1 1)])
          (let ([zero (aset arr 2 5)])
            (let ([zero (aset arr 3 3)])
              (let ([zero (aset arr 4 4)])
                (let ([zero (aset arr 5 9)])
                  (let ([zero (aset arr 6 7)])
                    (let ([zero (aset arr 7 6)])
                      (let ([zero (aset arr 8 10)])
                        (let ([zero (aset arr 9 8)])
                          (let ([firstcall (print arr)])
                            (let ([secondcall (print 9)])
                              (let ([res1 (:find_array arr 9 0 )])
                                (print res1))))))))))))))))
  (:find_array (arr n index)
    (let ([lookup (aref arr index)])
      (let ([eq (= lookup n)])
        (if eq
          index
          (let ([indexplusone (+ 1 index)])
            (:find_array arr n indexplusone)))))))
     
